// Boost Software License - Version 1.0 - August 17th, 2003
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.



#include "stackcpp/misc/exceptions.h"

#include <stdexcept>
#include <string>



namespace stackcpp {

void throw_code(unsigned int http_code, std::string message) {
    if (http_code == 400)
        throw std::invalid_argument{"Invalid argument '" + message + "' passed to the API!"};
    else if (http_code == 401)
        throw access_token_required{};
    else if (http_code == 402)
        throw invalid_access_token{};
    else if (http_code == 403)
        throw access_denied{};
    else if (http_code == 404)
        throw no_method{};
    else if (http_code == 405)
        throw key_required{};
    else if (http_code == 406)
        throw access_token_compromised{};
    else if (http_code == 407)
        throw write_failed{};
    else if (http_code == 409)
        throw duplicate_request{};
    else if (http_code == 500)
        throw internal_error{};
    else if (http_code == 502)
        throw throttle_violation{};
    else if (http_code == 503)
        throw temporarily_unavailable{};
    throw fatal_exception{"Unrecognized error code " + std::to_string(http_code) + " with message " + message + "."};
}



const char* access_token_required::what() const noexcept {
    static std::string message = "An access token is required to make this request! Please authenticate beforehand.";
    return message.c_str();
}



const char* invalid_access_token::what() const noexcept {
    static std::string message = "Invalid access token! Please double check the passed access token.";
    return message.c_str();
}



const char* access_denied::what() const noexcept {
    static std::string message = "Access denied! Please check if you specified the right scope to gain access.";
    return message.c_str();
}



const char* no_method::what() const noexcept {
    static std::string message = "The method you requested doesn't exist!";
    return message.c_str();
}



const char* key_required::what() const noexcept {
    static std::string message = "An API key is required to make this request!";
    return message.c_str();
}



const char* access_token_compromised::what() const noexcept {
    static std::string message = "The access token is no longer secure! Please generate a new one.";
    return message.c_str();
}



const char* write_failed::what() const noexcept {
    static std::string message = "The requested write operation failed!";
    return message.c_str();
}



const char* duplicate_request::what() const noexcept {
    static std::string message = "An identical request has already been made!";
    return message.c_str();
}



const char* internal_error::what() const noexcept {
    static std::string message = "An internal error occurred while processing the request!";
    return message.c_str();
}



const char* throttle_violation::what() const noexcept {
    static std::string message = "Too many requests were made! Please try again tomorrow.";
    return message.c_str();
}



const char* temporarily_unavailable::what() const noexcept {
    static std::string message = "The StackExchange API is temporarily unavailable, please try again later.";
    return message.c_str();
}



back_off::back_off(unsigned int seconds) noexcept : seconds_{seconds} {}



const char* back_off::what() const noexcept {
    static std::string message = "You need to back off for " + std::to_string(seconds_) + " seconds.";
    return message.c_str();
}



fatal_exception::fatal_exception(std::string description) noexcept : description_{std::move(description)} {}



const char* fatal_exception::what() const noexcept {
    static std::string message = "Report to devs please: " + description_;
    return message.c_str();
}



invalid_json_value::invalid_json_value(const std::string& wrong_format) noexcept : fatal_exception{"JSON value is not a(n) " + wrong_format + "."} {}



enum_missing_string::enum_missing_string() noexcept : fatal_exception{"An enum value doesn't have a corresponding string representation."} {}



unknown_enum_string::unknown_enum_string(const std::string& enum_type, const std::string& enum_value) noexcept
        : fatal_exception{"Invalid enum of type " + enum_type + " with value of " + enum_value + "."} {}
}
