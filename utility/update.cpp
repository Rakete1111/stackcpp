// Boost Software License - Version 1.0 - August 17th, 2003
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.



// This program updates the StackExchange sites list and map in include/stackcpp/sites/.

#include <algorithm>
#include <fstream>
#include <iostream>
#include <vector>

#include "stackcpp/client.h"



constexpr const char* list_path = "../include/stackcpp/sites/list.txt";
constexpr const char* map_path = "../include/stackcpp/sites/map.txt";



// Converts a string to the appropriate C++ format.
std::string convert(std::string string) noexcept;

std::vector<std::string> read_lines(const std::string& file) noexcept;



int main() noexcept {
    std::cout << "-- Sending request...\n";

    const stackcpp::client client{"api_key"};
    auto sites = client.sites(1000, stackcpp::filter("*7vc-8.M7rrnfW.")).get();

    sites.erase(std::remove_if(sites.begin(), sites.end(), [](const stackcpp::site& site) { return site.name().find("Meta") != std::string::npos; }), sites.end());

    const auto old_list = read_lines(list_path);

    std::cout << "-- Updating...\n";

    std::ofstream output_list{list_path, std::ios::app};
    if (!output_list.is_open())
        return -1;

    std::ofstream output_map{map_path, std::ios::app};
    if (!output_map.is_open())
        return -1;

    bool found_something = false;
    for (const auto& site : sites) {
        std::string name = convert(site.name());

        // Special sites can't be parsed as the others, as they would conflict somewhere.
        if (site.api_site() == "3dprinting")
            name = "printing3d";
        else if (site.api_site() == "es.stackoverflow")
            name = "stack_overflow_spanish";
        else if (site.api_site() == "rus")
            name = "russian_lang";
        else if (site.api_site() == "ru.stackoverflow")
            name = "stack_overflow_russian";
        else if (site.api_site() == "ja.stackoverflow")
            name = "stack_overflow_japanese";
        else if (site.api_site() == "pt.stackoverflow")
            name = "stack_overflow_portuguese";

        if (std::find(old_list.cbegin(), old_list.cend(), name) == old_list.cend()) {
            found_something = true;
            std::cout << "-- Adding \"" << name << "\".\n";

            output_list << name << ",\n";
            output_map << "{sites::" << name << ", \"" << site.api_site() << "\"},\n";
        }
    }

    if (!found_something)
        std::cout << "-- There was nothing to update!\n";
    std::cout << "-- Done\n";

    return 0;
}



std::string convert(std::string string) noexcept {
    std::size_t pos{};
    if ((pos = string.find("&")) != std::string::npos)
        string.replace(pos, 1, "and");
    if ((pos = string.find(" -")) != std::string::npos)
        string.erase(pos, 1);
    if ((pos = string.find("- ")) != std::string::npos)
        string.erase(pos + 1, 1);

    string.erase(std::remove_if(string.begin(), string.end(), [](const char ch) { return !std::isalnum(ch) && !std::isspace(ch) && ch != '-'; }), string.end());

    for (char& ch : string) {
        if (std::isspace(ch) || ch == '-')
            ch = '_';
        ch = static_cast<char>(std::tolower(ch));
    }

    return string;
}



std::vector<std::string> read_lines(const std::string& file) noexcept {
    std::ifstream file_stream{file};
    if (!file_stream.is_open())
        return {};

    std::vector<std::string> vector;
    std::string line;
    while (std::getline(file_stream, line)) {
        if (!line.empty() && line.substr(0, 2) == "//")
            continue;
        vector.push_back(line.substr(0, line.length() - 1));
    }

    return vector;
}