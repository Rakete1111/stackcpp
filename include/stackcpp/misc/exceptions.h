// Boost Software License - Version 1.0 - August 17th, 2003
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.



#ifndef STACKCPP_EXCEPTIONS_H
#define STACKCPP_EXCEPTIONS_H

#include <exception>
#include <string>



namespace stackcpp {

// Helper function to throw the appropriate exception based on a HTTP return code.
void throw_code(unsigned int http_code, std::string message);



// Thrown when a request requires an access token, but none was specified.
struct access_token_required final : std::exception {
    const char* what() const noexcept override;
};



// Thrown when an invalid access token was used.
struct invalid_access_token final : std::exception {
    const char* what() const noexcept override;
};



// Thrown when a request was made with insufficient permissions.
struct access_denied final : std::exception {
    const char* what() const noexcept override;
};



// Thrown when a request contains a call to a non-existent method.
struct no_method final : std::exception {
    const char* what() const noexcept override;
};



// Thrown when a request requires an application key.
struct key_required final : std::exception {
    const char* what() const noexcept override;
};



// Thrown when a request is believed by StackExchange to be insecure.
struct access_token_compromised final : std::exception {
    const char* what() const noexcept override;
};



// Thrown when a write operation has failed.
struct write_failed final : std::exception {
    const char* what() const noexcept override;
};



// Thrown when a duplicate request was made.
struct duplicate_request final : std::exception {
    const char* what() const noexcept override;
};



// Thrown when the StackExchange API experienced an internal error.
struct internal_error final : std::exception {
    const char* what() const noexcept override;
};



// Thrown when the request limit is reached.
struct throttle_violation final : std::exception {
    const char* what() const noexcept override;
};



// Thrown when the StackExchange API is unreachable.
struct temporarily_unavailable final : std::exception {
    const char* what() const noexcept override;
};



// Thrown when you need to back off.
struct back_off final : std::exception {
    back_off(unsigned int seconds) noexcept;
    const char* what() const noexcept override;
    unsigned int seconds() const noexcept { return seconds_; }

private:
    unsigned int seconds_;
};



// Thrown when stackcpp encounters an unexpected error.
struct fatal_exception : std::exception {
    fatal_exception(std::string description) noexcept;
    const char* what() const noexcept override;

private:
    std::string description_;
};



// Thrown when trying to convert a JSON value which doesn't match a format (like trying to convert an 'int' to a 'user_type'.)
struct invalid_json_value final : fatal_exception {
    invalid_json_value(const std::string& wrong_format) noexcept;
};



// Thrown when an enum value doesn't have a string representation.
struct enum_missing_string final : fatal_exception {
    enum_missing_string() noexcept;
};



// Thrown when a string doesn't have a valid enum value.
struct unknown_enum_string final : fatal_exception {
    unknown_enum_string(const std::string& enum_type, const std::string& enum_value) noexcept;
};
}

#endif
