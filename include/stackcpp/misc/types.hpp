// Boost Software License - Version 1.0 - August 17th, 2003
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.



#ifndef STACKCPP_TYPES_HPP
#define STACKCPP_TYPES_HPP

#include <chrono>
#include <cstdint>
#include <istream>
#include <ostream>
#include <string>
#include <unordered_map>



namespace stackcpp {

// Types returned by the API are aliased to be more flexible when the range of a type increases.
using integer_t = std::int32_t;
using uinteger_t = std::uint32_t;
using decimal_t = double;
using date_t = std::chrono::time_point<std::chrono::system_clock>;
using map_t = std::unordered_map<std::string, std::string>;



// Delimiter used to flatten lists.
constexpr const char* delimiter = ";";



// Type of an id to disambiguate between ids and numbers.
struct unique_id final {
    using type = uinteger_t;

    explicit constexpr unique_id() noexcept : id_{} {}
    explicit constexpr unique_id(const type id) noexcept : id_{id} {}
    constexpr operator type() const noexcept { return id_; }

    friend std::istream& operator>>(std::istream& is, unique_id& id) noexcept { return is >> id.id_; }
    friend std::ostream& operator<<(std::ostream& os, const unique_id& id) noexcept { return os << id.id_; }

private:
    type id_;
};

inline namespace literals {
// Useful UDL to generate IDs on the fly.
constexpr unique_id operator""_uid(const unsigned long long id) noexcept {
    return unique_id{static_cast<unique_id::type>(id)};
}
}
}

#endif
