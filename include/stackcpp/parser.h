// Boost Software License - Version 1.0 - August 17th, 2003
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.



#ifndef STACKCPP_PARSER_H
#define STACKCPP_PARSER_H

#include "stackcpp/misc/flags.hpp"
#include "stackcpp/misc/types.hpp"
#include "stackcpp/objects/access_token.hpp"
#include "stackcpp/objects/account_merge.hpp"
#include "stackcpp/objects/answer.hpp"
#include "stackcpp/objects/badge.hpp"
#include "stackcpp/objects/badge_count.hpp"
#include "stackcpp/objects/closed_detail.hpp"
#include "stackcpp/objects/comment.hpp"
#include "stackcpp/objects/event.hpp"
#include "stackcpp/objects/flag_option.hpp"
#include "stackcpp/objects/inbox_item.hpp"
#include "stackcpp/objects/info.hpp"
#include "stackcpp/objects/migration_info.hpp"
#include "stackcpp/objects/network_activity.hpp"
#include "stackcpp/objects/network_post.hpp"
#include "stackcpp/objects/network_user.hpp"
#include "stackcpp/objects/notice.hpp"
#include "stackcpp/objects/notification.hpp"
#include "stackcpp/objects/original_question.hpp"
#include "stackcpp/objects/post.hpp"
#include "stackcpp/objects/privilege.hpp"
#include "stackcpp/objects/question.hpp"
#include "stackcpp/objects/question_timeline.hpp"
#include "stackcpp/objects/related_site.hpp"
#include "stackcpp/objects/reputation.hpp"
#include "stackcpp/objects/reputation_history.hpp"
#include "stackcpp/objects/revision.hpp"
#include "stackcpp/objects/search_excerpt.hpp"
#include "stackcpp/objects/shallow_user.hpp"
#include "stackcpp/objects/site.hpp"
#include "stackcpp/objects/styling.hpp"
#include "stackcpp/objects/suggested_edit.hpp"
#include "stackcpp/objects/tag.hpp"
#include "stackcpp/objects/tag_score.hpp"
#include "stackcpp/objects/tag_synonym.hpp"
#include "stackcpp/objects/tag_wiki.hpp"
#include "stackcpp/objects/top_tag.hpp"
#include "stackcpp/objects/user.hpp"
#include "stackcpp/objects/user_timeline.hpp"

#include <chrono>
#include <rapidjson/document.h>
#include <string>
#include <utility>
#include <vector>



namespace stackcpp {

// Convert an enum to the corresponding API string.
std::string parse_enum(const user_sort& sort);
std::string parse_enum(const answer_sort& sort);
std::string parse_enum(const badge_sort& sort);
std::string parse_enum(const comment_sort& sort);
std::string parse_enum(const favorite_sort& sort);
std::string parse_enum(const activity_sort& sort) noexcept;
std::string parse_enum(const post_sort& sort);
std::string parse_enum(const question_sort& sort);
std::string parse_enum(const suggested_edit_sort& sort);
std::string parse_enum(const tag_sort& sort);
std::string parse_enum(const search_sort& sort);
std::string parse_enum(const synonym_sort& sort);
std::string parse_enum(const query_order& order);
std::string parse_enum(const badge_rank& rank);



// Convert a value to string.
std::string parse_value(const integer_t value) noexcept;
std::string parse_value(const uinteger_t value) noexcept;
std::string parse_value(const date_t value) noexcept;
std::string parse_value(const bool value) noexcept;
std::string parse_value(const std::string& value) noexcept;
std::string parse_value(const badge_rank& value) noexcept;
std::string parse_value(const period& value);
std::string parse_value(const site_type& value);



// Convert a JSON property to the corresponding type.
user parse_user(const rapidjson::Value& properties);
answer parse_answer(const rapidjson::Value& properties);
shallow_user parse_shallow_user(const rapidjson::Value& properties);
comment parse_comment(const rapidjson::Value& properties);
badge parse_badge(const rapidjson::Value& properties);
badge_count parse_badge_count(const rapidjson::Value& properties);
question parse_question(const rapidjson::Value& properties);
closed_detail parse_closed_detail(const rapidjson::Value& properties);
migration_info parse_migration_info(const rapidjson::Value& properties);
notice parse_notice(const rapidjson::Value& properties);
original_question parse_original_question(const rapidjson::Value& properties);
related_site parse_related_site(const rapidjson::Value& properties);
site parse_site(const rapidjson::Value& properties);
styling parse_styling(const rapidjson::Value& properties);
network_activity parse_network_activity(const rapidjson::Value& properties);
notification parse_notification(const rapidjson::Value& properties);
post parse_post(const rapidjson::Value& properties);
privilege parse_privilege(const rapidjson::Value& properties);
reputation parse_reputation(const rapidjson::Value& properties);
reputation_history parse_reputation_history(const rapidjson::Value& properties);
suggested_edit parse_suggested_edit(const rapidjson::Value& properties);
tag parse_tag(const rapidjson::Value& properties);
user_timeline parse_user_timeline(const rapidjson::Value& properties);
top_tag parse_top_tag(const rapidjson::Value& properties);
inbox_item parse_inbox_item(const rapidjson::Value& properties);
flag_option parse_flag_option(const rapidjson::Value& properties);
event parse_event(const rapidjson::Value& properties);
info parse_info(const rapidjson::Value& properties);
revision parse_revision(const rapidjson::Value& properties);
question_timeline parse_question_timeline(const rapidjson::Value& properties);
search_excerpt parse_search_excerpt(const rapidjson::Value& properties);
tag_synonym parse_tag_synonym(const rapidjson::Value& properties);
tag_score parse_tag_score(const rapidjson::Value& properties);
tag_wiki parse_tag_wiki(const rapidjson::Value& properties);
access_token parse_access_token(const rapidjson::Value& properties);
network_user parse_network_user(const rapidjson::Value& properties);
network_post parse_network_post(const rapidjson::Value& properties);
account_merge parse_account_merge(const rapidjson::Value& properties);
}

#endif
