// Boost Software License - Version 1.0 - August 17th, 2003
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.



#ifndef STACKCPP_RESTRICT_H
#define STACKCPP_RESTRICT_H

#include "stackcpp/misc/flags.hpp"
#include "stackcpp/misc/traits.hpp"
#include "stackcpp/misc/types.hpp"
#include "stackcpp/parser.h"

#include <string>
#include <type_traits>
#include <utility>



namespace stackcpp {

// Gets the default value for the restriction sorts.
template<typename T> constexpr T default_value() noexcept;
template<> constexpr query_order default_value() noexcept {
    return query_order::descending;
}
template<> constexpr user_sort default_value() noexcept {
    return user_sort::reputation;
}
template<> constexpr answer_sort default_value() noexcept {
    return answer_sort::activity;
}
template<> constexpr badge_sort default_value() noexcept {
    return badge_sort::rank;
}
template<> constexpr comment_sort default_value() noexcept {
    return comment_sort::creation_date;
}
template<> constexpr favorite_sort default_value() noexcept {
    return favorite_sort::last_activity;
}
template<> constexpr activity_sort default_value() noexcept {
    return activity_sort::none;
}
template<> constexpr post_sort default_value() noexcept {
    return post_sort::activity;
}
template<> constexpr question_sort default_value() noexcept {
    return question_sort::activity;
}
template<> constexpr suggested_edit_sort default_value() noexcept {
    return suggested_edit_sort::creation;
}
template<> constexpr tag_sort default_value() noexcept {
    return tag_sort::count;
}
template<> constexpr search_sort default_value() noexcept {
    return search_sort::activity;
}
template<> constexpr synonym_sort default_value() noexcept {
    return synonym_sort::creation;
}



// Base type that stores information for every data type.
struct generic_data_t {
    friend generic_data_t filter(std::string filter) noexcept;
    friend generic_data_t unsafe() noexcept;

    friend generic_data_t operator|(generic_data_t lhs, const generic_data_t& rhs) noexcept;

protected:
    void try_assign(const generic_data_t& other) noexcept;
    map_t as_map() const noexcept;

    bool safe_ = true;
    map_t values_;
};



// Type that stores information that doesn't depend on the sort type.
struct data_t final : generic_data_t {
    template<typename T> friend data_t min(T&& value) noexcept;
    template<typename T> friend data_t max(T&& value) noexcept;
    friend data_t from_date(const date_t& value) noexcept;
    friend data_t to_date(const date_t& value) noexcept;
    friend data_t descending() noexcept;
    friend data_t ascending() noexcept;

    friend data_t operator|(data_t lhs, const generic_data_t& rhs) noexcept;
    friend data_t operator|(const generic_data_t& lhs, data_t rhs) noexcept;
    friend data_t operator|(data_t lhs, const data_t& rhs) noexcept;

    data_t() = default;
    data_t(generic_data_t value) noexcept;

    data_t& operator|=(const generic_data_t& rhs) noexcept;
    data_t& operator|=(const data_t& rhs) noexcept;

    map_t as_map() const noexcept;

private:
    map_t values_;
};



// Type that stores information about an advanced search (because function overloading would result in >13! overloads).
struct search_data_t final : generic_data_t {
    friend search_data_t search(std::string value) noexcept;
    friend search_data_t accepted(const bool value) noexcept;
    friend search_data_t answers(const uinteger_t value) noexcept;
    friend search_data_t body(std::string value) noexcept;
    friend search_data_t closed(const bool value) noexcept;
    friend search_data_t migrated(const bool value) noexcept;
    friend search_data_t information(const bool value) noexcept;
    friend search_data_t nottagged(const std::vector<std::string>& values) noexcept;
    friend search_data_t nottagged(std::string value) noexcept;
    friend search_data_t tagged(const std::vector<std::string>& values) noexcept;
    friend search_data_t tagged(std::string value) noexcept;
    friend search_data_t title(std::string value) noexcept;
    friend search_data_t owner(unique_id value) noexcept;
    friend search_data_t url(std::string value) noexcept;
    friend search_data_t views(const uinteger_t value) noexcept;
    friend search_data_t wiki(const bool value) noexcept;

    friend search_data_t operator|(search_data_t lhs, const generic_data_t& rhs) noexcept;
    friend search_data_t operator|(const generic_data_t& lhs, search_data_t rhs) noexcept;
    friend search_data_t operator|(search_data_t lhs, const search_data_t& rhs) noexcept;

    search_data_t() = default;
    search_data_t(generic_data_t value) noexcept;

    search_data_t& operator|=(const generic_data_t& rhs) noexcept;
    search_data_t& operator|=(const search_data_t& rhs) noexcept;

    map_t as_map() const noexcept;

private:
    map_t values_;
};



generic_data_t filter(std::string filter) noexcept;
generic_data_t unsafe() noexcept;

template<typename T> data_t min(T&& value) noexcept;
template<typename T> data_t max(T&& value) noexcept;
data_t from_date(const date_t& value) noexcept;
data_t to_date(const date_t& value) noexcept;
data_t descending() noexcept;
data_t ascending() noexcept;
data_t write() noexcept;

search_data_t search(std::string value) noexcept;
search_data_t accepted(const bool value) noexcept;
search_data_t answers(const uinteger_t value) noexcept;
search_data_t body(std::string value) noexcept;
search_data_t closed(const bool value) noexcept;
search_data_t migrated(const bool value) noexcept;
search_data_t information(const bool value) noexcept;
search_data_t nottagged(const std::vector<std::string>& values) noexcept;
search_data_t nottagged(std::string value) noexcept;
search_data_t tagged(const std::vector<std::string>& values) noexcept;
search_data_t tagged(std::string value) noexcept;
search_data_t title(std::string value) noexcept;
search_data_t owner(unique_id value) noexcept;
search_data_t url(std::string value) noexcept;
search_data_t views(const uinteger_t value) noexcept;
search_data_t wiki(const bool value) noexcept;



// Provides settings to restrict the range of queries.
template<typename T, typename U, typename = void> class restrict;

template<typename T, typename U> class restrict<T, U, typename std::enable_if<std::is_enum<T>::value && is_valid_data<U>::value>::type> final
{
public:
    restrict() = default;
    restrict(T sort) noexcept;
    restrict(U data) noexcept;
    restrict(generic_data_t data) noexcept;

    // Constructs a property map with the given filter.
    map_t as_map() const noexcept;

    restrict& operator|=(const restrict& rhs) noexcept;

    template<typename TT, typename UU> friend restrict<TT, UU> operator|(restrict<TT, UU> lhs, const restrict<TT, UU>& rhs) noexcept;
    template<typename TT, typename UU> friend restrict<TT, UU> operator|(restrict<TT, UU> lhs, const UU& rhs) noexcept;
    template<typename TT, typename UU> friend restrict<TT, UU> operator|(const UU& lhs, restrict<TT, UU> rhs) noexcept;

private:
    T sort_ = default_value<T>();
    U data_;
};



template<typename T, typename U>
typename std::enable_if<std::is_enum<T>::value && is_valid_data<U>::value, restrict<T, sort_data_t<T>>>::type operator|(T lhs, const U& rhs) noexcept;

template<typename T, typename U>
typename std::enable_if<std::is_enum<T>::value && is_valid_data<U>::value, restrict<T, sort_data_t<T>>>::type operator|(const U& lhs, T rhs) noexcept;



// Convenient aliases for the user.
using user_restrict = restrict<user_sort, data_t>;
using answer_restrict = restrict<answer_sort, data_t>;
using badge_restrict = restrict<badge_sort, data_t>;
using comment_restrict = restrict<comment_sort, data_t>;
using favorite_restrict = restrict<favorite_sort, data_t>;
using activity_restrict = restrict<activity_sort, data_t>;
using post_restrict = restrict<post_sort, data_t>;
using question_restrict = restrict<question_sort, data_t>;
using edit_restrict = restrict<suggested_edit_sort, data_t>;
using tag_restrict = restrict<tag_sort, data_t>;
using search_restrict = restrict<search_sort, search_data_t>;
using synonym_restrict = restrict<synonym_sort, data_t>;



// Some templates are so small it isn't worth it implementing them in a source file.
template<typename T> data_t min(T&& value) noexcept {
    data_t data;
    data.values_["min"] = parse_value(std::move(value));
    return data;
}

template<typename T> data_t max(T&& value) noexcept {
    data_t data;
    data.values_["max"] = parse_value(std::move(value));
    return data;
}
}

#endif
