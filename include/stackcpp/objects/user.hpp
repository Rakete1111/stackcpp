// Boost Software License - Version 1.0 - August 17th, 2003
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.



#ifndef STACKCPP_USER_HPP
#define STACKCPP_USER_HPP

#include "stackcpp/misc/flags.hpp"
#include "stackcpp/misc/types.hpp"
#include "stackcpp/objects/badge_count.hpp"

#include <rapidjson/document.h>
#include <string>
#include <vector>



namespace stackcpp {

inline namespace objects { struct user; }
user parse_user(const rapidjson::Value&);



inline namespace objects {
struct user final {
    std::string name() const noexcept { return name_; }
    std::string about_me() const noexcept { return about_me_; }
    integer_t accept_rate() const noexcept { return accept_rate_; }
    unique_id account_id() const noexcept { return account_id_; }
    integer_t age() const noexcept { return age_; }
    integer_t answers() const noexcept { return answers_; }
    badge_count badges() const noexcept { return badges_; }
    date_t creation() const noexcept { return creation_; }
    integer_t downvotes() const noexcept { return downvotes_; }
    bool employee() const noexcept { return employee_; }
    date_t last_accessed() const noexcept { return last_accessed_; }
    date_t last_modified() const noexcept { return last_modified_; }
    std::string profile() const noexcept { return profile_; }
    std::string location() const noexcept { return location_; }
    std::string avatar() const noexcept { return avatar_; }
    integer_t questions() const noexcept { return questions_; }
    integer_t reputation() const noexcept { return reputation_; }
    integer_t reputation_day() const noexcept { return reputation_day_; }
    integer_t reputation_week() const noexcept { return reputation_week_; }
    integer_t reputation_month() const noexcept { return reputation_month_; }
    integer_t reputation_quarter() const noexcept { return reputation_quarter_; }
    integer_t reputation_year() const noexcept { return reputation_year_; }
    date_t suspension() const noexcept { return suspension_; }
    integer_t upvotes() const noexcept { return upvotes_; }
    unique_id id() const noexcept { return id_; }
    user_type type() const noexcept { return type_; }
    integer_t profile_views() const noexcept { return profile_views_; }
    std::string personal_site() const noexcept { return personal_site_; }

private:
    friend user stackcpp::parse_user(const rapidjson::Value&);

    // See [dcl.fct.def.default]/4 and [dcl.init.aggr]/1 for rational.
    user() noexcept {};

    std::string name_;
    std::string about_me_;
    integer_t accept_rate_{};
    unique_id account_id_;
    integer_t age_{};
    integer_t answers_{};
    badge_count badges_;
    date_t creation_;
    integer_t downvotes_{};
    bool employee_{};
    date_t last_accessed_;
    date_t last_modified_;
    std::string profile_;
    std::string location_;
    std::string avatar_;
    integer_t questions_{};
    integer_t reputation_{};
    integer_t reputation_day_{};
    integer_t reputation_week_{};
    integer_t reputation_month_{};
    integer_t reputation_quarter_{};
    integer_t reputation_year_{};
    date_t suspension_;
    integer_t upvotes_{};
    unique_id id_;
    user_type type_{};
    integer_t profile_views_{};
    std::string personal_site_;
};
}
}

#endif
