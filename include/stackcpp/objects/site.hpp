// Boost Software License - Version 1.0 - August 17th, 2003
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.



#ifndef STACKCPP_SITE_HPP
#define STACKCPP_SITE_HPP

#include "stackcpp/misc/flags.hpp"
#include "stackcpp/misc/types.hpp"
#include "stackcpp/objects/related_site.hpp"
#include "stackcpp/objects/styling.hpp"

#include <rapidjson/document.h>
#include <string>
#include <vector>



namespace stackcpp {

inline namespace objects { struct site; }
site parse_site(const rapidjson::Value&);



inline namespace objects {
struct site final {
    std::vector<std::string> aliases() const noexcept { return aliases_; }
    std::string api_site() const noexcept { return api_site_; }
    std::string audience() const noexcept { return audience_; }
    date_t beta_closed() const noexcept { return beta_closed_; }
    std::string favicon() const noexcept { return favicon_; }
    std::string icon_high_res() const noexcept { return icon_high_res_; }
    std::string icon() const noexcept { return icon_; }
    date_t launch() const noexcept { return launch_; }
    std::string logo() const noexcept { return logo_; }
    std::vector<std::string> markdown_extensions() const noexcept { return markdown_extensions_; }
    std::string name() const noexcept { return name_; }
    date_t open_beta() const noexcept { return open_beta_; }
    std::vector<related_site> related() const noexcept { return related_; }
    site_state state() const noexcept { return state_; }
    std::string type() const noexcept { return type_; }
    std::string url() const noexcept { return url_; }
    styling style() const noexcept { return style_; }
    std::string twitter() const noexcept { return twitter_; }

private:
    friend site stackcpp::parse_site(const rapidjson::Value&);
    friend struct migration_info;
    friend struct notification;
    friend struct inbox_item;
    friend struct info;

    // See [dcl.fct.def.default]/4 and [dcl.init.aggr]/1 for rational.
    site() noexcept {}

    std::vector<std::string> aliases_;
    std::string api_site_;
    std::string audience_;
    date_t beta_closed_;
    std::string favicon_;
    std::string icon_high_res_;
    std::string icon_;
    date_t launch_;
    std::string logo_;
    std::vector<std::string> markdown_extensions_;
    std::string name_;
    date_t open_beta_;
    std::vector<related_site> related_;
    site_state state_{};
    std::string type_;
    std::string url_;
    styling style_{};
    std::string twitter_;
};
}
}

#endif
