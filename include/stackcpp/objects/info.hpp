// Boost Software License - Version 1.0 - August 17th, 2003
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.



#ifndef STACKCPP_INFO_HPP
#define STACKCPP_INFO_HPP

#include "stackcpp/misc/types.hpp"
#include "stackcpp/objects/site.hpp"

#include <rapidjson/document.h>
#include <string>



namespace stackcpp {

inline namespace objects { struct info; }
info parse_info(const rapidjson::Value&);



inline namespace objects {
struct info final {
    decimal_t answers_per_minute() const noexcept { return answers_per_minute_; }
    std::string api_revision() const noexcept { return api_revision_; }
    decimal_t badges_per_minute() const noexcept { return badges_per_minute_; }
    integer_t new_active_users() const noexcept { return new_active_users_; }
    decimal_t questions_per_minute() const noexcept { return questions_per_minute_; }
    objects::site site() const noexcept { return site_; }
    integer_t accepted() const noexcept { return accepted_; }
    integer_t answers() const noexcept { return answers_; }
    integer_t badges() const noexcept { return badges_; }
    integer_t comments() const noexcept { return comments_; }
    integer_t questions() const noexcept { return questions_; }
    integer_t unanswered() const noexcept { return unanswered_; }
    integer_t users() const noexcept { return users_; }
    integer_t votes() const noexcept { return votes_; }

private:
    friend info stackcpp::parse_info(const rapidjson::Value&);

    // See [dcl.fct.def.default]/4 and [dcl.init.aggr]/1 for rational.
    info() noexcept {}

    decimal_t answers_per_minute_{};
    std::string api_revision_;
    decimal_t badges_per_minute_{};
    integer_t new_active_users_{};
    decimal_t questions_per_minute_{};
    objects::site site_;
    integer_t accepted_{};
    integer_t answers_{};
    integer_t badges_{};
    integer_t comments_{};
    integer_t questions_{};
    integer_t unanswered_{};
    integer_t users_{};
    integer_t votes_{};
};
}
}

#endif