// Boost Software License - Version 1.0 - August 17th, 2003
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.



#ifndef STACKCPP_SEARCH_EXCERPT_HPP
#define STACKCPP_SEARCH_EXCERPT_HPP

#include "stackcpp/misc/flags.hpp"
#include "stackcpp/misc/types.hpp"
#include "stackcpp/objects/inbox_item.hpp"
#include "stackcpp/objects/shallow_user.hpp"

#include <rapidjson/document.h>
#include <string>



namespace stackcpp {

inline namespace objects { struct search_excerpt; }
search_excerpt parse_search_excerpt(const rapidjson::Value&);



inline namespace objects {
struct search_excerpt final {
    integer_t answers() const noexcept { return answers_; }
    unique_id answer_id() const noexcept { return answer_id_; }
    std::string content() const noexcept { return content_; }
    date_t closed() const noexcept { return closed_; }
    date_t community_wiki() const noexcept { return community_wiki_; }
    date_t creation() const noexcept { return creation_; }
    std::vector<std::string> equivalent_tag_search() const noexcept { return equivalent_tag_search_; }
    std::string excerpt() const noexcept { return excerpt_; }
    bool has_accepted_answer() const noexcept { return has_accepted_answer_; }
    bool accepted() const noexcept { return accepted_; }
    bool answered() const noexcept { return answered_; }
    stackcpp::post_type item_type() const noexcept { return item_type_; }
    date_t last_active() const noexcept { return last_active_; }
    shallow_user last_active_by() const noexcept { return last_active_by_; }
    date_t locked() const noexcept { return locked_; }
    shallow_user owner() const noexcept { return owner_; }
    unique_id question_id() const noexcept { return question_id_; }
    integer_t question_score() const noexcept { return question_score_; }
    integer_t score() const noexcept { return score_; }
    std::vector<std::string> tags() const noexcept { return tags_; }
    std::string title() const noexcept { return title_; }

private:
    friend search_excerpt stackcpp::parse_search_excerpt(const rapidjson::Value&);

    // See [dcl.fct.def.default]/4 and [dcl.init.aggr]/1 for rational.
    search_excerpt() noexcept {}

    integer_t answers_{};
    unique_id answer_id_;
    std::string content_;
    date_t closed_;
    date_t community_wiki_;
    date_t creation_;
    std::vector<std::string> equivalent_tag_search_;
    std::string excerpt_;
    bool has_accepted_answer_{};
    bool accepted_{};
    bool answered_{};
    stackcpp::post_type item_type_{};
    date_t last_active_;
    shallow_user last_active_by_;
    date_t locked_;
    shallow_user owner_;
    unique_id question_id_;
    integer_t question_score_{};
    integer_t score_{};
    std::vector<std::string> tags_;
    std::string title_;
};
}
}

#endif
