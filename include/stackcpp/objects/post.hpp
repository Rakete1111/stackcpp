// Boost Software License - Version 1.0 - August 17th, 2003
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.



#ifndef STACKCPP_POST_HPP
#define STACKCPP_POST_HPP

#include "stackcpp/misc/flags.hpp"
#include "stackcpp/misc/types.hpp"
#include "stackcpp/objects/comment.hpp"
#include "stackcpp/objects/shallow_user.hpp"

#include <rapidjson/document.h>
#include <string>
#include <vector>



namespace stackcpp {

inline namespace objects { struct post; }
post parse_post(const rapidjson::Value&);



inline namespace objects {
struct post final {
    std::string content() const noexcept { return content_; }
    std::string content_markdown() const noexcept { return content_markdown_; }
    std::vector<comment> comments() const noexcept { return comments_; }
    date_t creation() const noexcept { return creation_; }
    integer_t downvotes() const noexcept { return downvotes_; }
    bool has_downvoted() const noexcept { return has_downvoted_; }
    date_t last_active() const noexcept { return last_active_; }
    date_t last_edited() const noexcept { return last_edited_; }
    shallow_user last_editor() const noexcept { return last_editor_; }
    std::string url() const noexcept { return url_; }
    shallow_user owner() const noexcept { return owner_; }
    unique_id id() const noexcept { return id_; }
    post_type type() const noexcept { return type_; }
    integer_t score() const noexcept { return score_; }
    std::string share_url() const noexcept { return share_url_; }
    std::string title() const noexcept { return title_; }
    integer_t upvotes() const noexcept { return upvotes_; }
    bool has_upvoted() const noexcept { return has_upvoted_; }

private:
    friend post stackcpp::parse_post(const rapidjson::Value&);

    // See [dcl.fct.def.default]/4 and [dcl.init.aggr]/1 for rational.
    post() noexcept {};

    std::string content_;
    std::string content_markdown_;
    std::vector<comment> comments_;
    date_t creation_;
    integer_t downvotes_{};
    bool has_downvoted_{};
    date_t last_active_;
    date_t last_edited_;
    shallow_user last_editor_;
    std::string url_;
    shallow_user owner_;
    unique_id id_;
    post_type type_{};
    integer_t score_{};
    std::string share_url_;
    std::string title_;
    integer_t upvotes_{};
    bool has_upvoted_{};
};
}
}

#endif
